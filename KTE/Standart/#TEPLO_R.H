
 /* Файл сформирован программой < C:\PROJECT.FUJ\KTE\STANDART\#TEPLO_U.EXE >. */

  #ifndef _Teplo_r_h
  #define _Teplo_r_h

    /*   Значение в дискретах, соответствующее номинальному
     * значению тока, используемого для теплового расчета.  */

  #define  _It_Nom_r       ( (w) 200 )

    /* Количество точек заданной токовременной таблицы. */

  #define  _NumTeploPoint_r ( (b) 5  )

/*------------------------------------------------*/
#ifdef _MAIN_INCLUDE
/*------------------------------------------------*/

    /*   Таблица токов заданной токовременной таблицы. */

  const word  _Tok_r [ _NumTeploPoint_r ] = {
                             (d) 1.050000 * (d)_It_Nom_r + (d) 0.5 ,
                             (d) 1.500000 * (d)_It_Nom_r + (d) 0.5 ,
                             (d) 1.750000 * (d)_It_Nom_r + (d) 0.5 ,
                             (d) 2.000000 * (d)_It_Nom_r + (d) 0.5 ,
                             (d) 2.250000 * (d)_It_Nom_r + (d) 0.5
                                    };

    /*   Таблица коэффициентов расчета нагрева. Коэффициенты
     *  в таблице расположены соответственно токам в вышеприведеной таблице.
     *  Обе таблицы используются для нахождения коэфф. расчета как функции
     *  текущего тока. На интервалах между точками коэффициент вычисляется
     *  путем линейной аппроксимации.
     */

  const word  _Kq_r  [ _NumTeploPoint_r ] = {
                                      0x006cu ,
                                      0x0108u ,
                                      0x015bu ,
                                      0x0406u ,
                                      0x04cfu
                                    };

const struct Teplo_Data tpl_r =
{

    /* Количество точек заданной токовременной таблицы. */

  /* word   NumTeploPoint = */   _NumTeploPoint_r,

    /* Время цикла перерасчета тепловой защиты ( в милисекундах). */

  /* word   TimeCikl_Teplo = */  19,

    /*   Макс. доп. значение нагрева ( вычисляется в том же масштабе,
     * что и ток). Соответствует макс.доп. значению старших двух байт
     * теплового интегратора.
     */

  /* word   TeploMax = */ (w)( 1.045000 * (d)_It_Nom_r + (d) 0.5),

    /*   Значение в дискретах, соответствующее номинальному
     * значению тока, используемого для теплового расчета.  */
    /*   Номинальное значение нагрева вычисляется в том же масштабе,
     * что и ток. Соответствует установившемуся значению старших двух байт
     * теплового интегратора при длительном номинальном токе.
     */

  /* word   TeploNom = */    _It_Nom_r,

    /*   Таблица токов заданной токовременной таблицы. */

/* const word  *Tok = */  (word*)&_Tok_r[0],

    /*   Таблица коэффициентов расчета нагрева. */

/* const word  *Kq = */ (word*)&_Kq_r[0],

    /*   Коэффициент расчета охлаждения. */

/* const word  Kq_Ohlad = */ 0x072fu,

    /*   Коэффициент расчета допустимого тока как функции вычисленного нагрева.
     *  Следовало бы иметь таблицу коэфф. расположенных соответственно токам,
     *  но в этом случае отсутствует плавность наложения ограничения на ток (при
     *  монотонном(!) нагреве или охлаждении) из-за перехода от одного коэффициента
     *  к другому (в зависимости от диапазона тока).
     *    Поэтому выбран один обратный коэфф. соответствующий наибольшему коэфф. из
     *  таблицы '_Kq[]', что обеспечивает наибольшую плавность наростания или снижения
     *  ограничения и его несколько более раннее наложение.
     *  Если выбрать обратный коэфф. соответствующий наименьшему коэфф. из таблицы
     *  '_Kq[]', то при этом будет наблюдаться резкое наростание или снижение
     *  ограничения при его несколько более позднем наложение.
     */

/* const word  _Kq_Obratn = */ 0x3545u

};

/*------------------------------------------------*/
#else
/*------------------------------------------------*/

  extern const word  _Tok_r [ _NumTeploPoint_r ]  ;

  extern const word  _Kq_r [ _NumTeploPoint_r ]  ;

  extern const struct Teplo_Data tpl_r ;

/*---------------------------------------------*/
  #endif
  #endif
