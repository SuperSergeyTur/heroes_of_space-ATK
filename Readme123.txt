---- 03/03/08 -----

Сообщение об ошибке LOCATION COUNTER Overflow убирается путем перекидывания
большого файла типа "avar.c" или "read_ust.c" в inc.c.



---- 26/02/08 -----

Добавился параболический ЗИСк, файл "zi1.c". Длительность параболы вначеле и в
конце задания скорости задается уставкой  "ТемпЗИ-РС's'" в секундах.
Коэффициент закругления параболы рассчитывается автоматически и зависит от
текущих значений уставок "ТемпЗИ-РС's'" и "ТемпЗИ-РС'+-'". Можно также
корректировать коэффициент закругления константой в файле "zi1.c".


---- 12/12/08 -----

1. Для битов (например входных портов) нельзя применять опреацию
инверсии ~. Для битов нужно применять операцию !.



---- 10/06/07 -----

При предупреждающих сообщениях компилятора о том,
что не хватает место для констант:
W1308L: Overlap located section (CONST, CODE_START)

Необходимо сделать:
1. В компиляторе Project\Setup Tool Option во вкладке
Linker , Category: Disposition/Connection исправить
Start Adress FE0000 эр FD0000.
2. Изменить адресацию для каких-нибудь констант:
__far




---- 09/07/07 -----

                      Особенности компилятора для FR.

При сдвигании на всю разрядную сетку компилятор FR сдвиг не производит .
Например :
            1. Компилятор F16 при сдвиге word на 16 разрядов заполняет
               все разряды нулями .

            2. Компилятор FR  при сдвиге word на 16 разрядов ничего не делает и
               разряды остаются на месте .


                          Особенности компилятора ФР
                            при работе с Timer1_Ovr

1. При уровне оптимизации 2 компилятор ложит Timer1_Ovr в регистр и берет этот
регистр при необходимости не обновляя его . РЕШЕНИЕ - Присвоить Timer1_Ovr и
Puls_counter тип volatile - асинхронно-изменяемый .

2. Для беззнакового перехода по таймеру ОБЯЗАТЕЛЬНО :
   if ( (u)((w)(Timer1_Ovr - ax)) Знак_сравнения Значение )
     w - компилятор ФР делает 32-разрядные регистры . Если не указать w явно
то компилятор заполнит 16 разрядов в старшем слове 32-разрядногои регистра
единицами. А если указать , то ассемблерной командой EXTUH заполнит старшие
16-разрядов нулями .
     u - для того , чтобы компилятор не использовал по умолчанию команды
знакового перехода , а использовал беззнаковые .

1.
-----------
 БЫЛО:
-----------
     /* Выдержка времени после последнего нажатия клавиши и "гашение" монитора */
  if ( (u)( Timer1_Ovr - m_time ) >= (u)_TimeDoGasheniya )
    {            ────────────────┐ │
      сравнивается 32!-разрядный └─┴─────────┐
     результат вычитания - что неправильно.  │
                            ───────┬─────────┘
                                   │      16590              ._LINE  16, 587
CO 000024C2 9F8C00000000           │  R   16591              LDI:32  #_Timer1_Ovr, R12
CO 000024C8 05C0                   │      16592              LDUH    @R12, R0
CO 000024CA 9F8C00000000           │  R   16593              LDI:32  #_m_time, R12
CO 000024D0 05C1                   │      16594              LDUH    @R12, R1
CO 000024D2 AC10                   │      16595              SUB     R1, R0
CO 000024D4 9B0105DC               │      16596              LDI     #1500, R1
                                   └─────────────────────────────────────┐
CO 000024D8 AA10                          16597              CMP     R1, R0
                                          16598   x          BC32    L_4511, R12

-----------
СТАЛО:
-----------

     /* Выдержка времени после последнего нажатия клавиши и "гашение" монитора */
  ax = Timer1_Ovr- m_time;
  if ( (u)ax >= (u)_TimeDoGasheniya )
    {         │
           ───┴──────────────────────────┐
       теперь же мусор из старшего слова │
     32-разрядного вычитания срезается ┌─┘
                ─────────────┬─────────┘
                             │            16574              ._LINE  16, 584
CO 000024A0 9F8C00000000     │        R   16575              LDI:32  #_Timer1_Ovr, R12
CO 000024A6 05CA             │            16576              LDUH    @R12, R10
CO 000024A8 9F8C00000000     │        R   16577              LDI:32  #_m_time, R12
CO 000024AE 05C0             │            16578              LDUH    @R12, R0
CO 000024B0 AC0A             │            16579              SUB     R0, R10
CO 000024B2 9B0005DC         │            16580              LDI     #1500, R0
                             └─────────────────────────────────┐
CO 000024B6 97BA                          16581              EXTUH   R10
                                          16582              ._LINE  16, 585
CO 000024B8 AA0A                          16583              CMP     R0, R10
                                          16584   x          BC32    L_4505, R12

//-----------------------------




---- 02/11/05 -----

inc.c------------------

//#define  _FLASH_INCLUDE

//#include "obj.c"
//#include "obj_reg.c"


inc2.c------------------

#define  _FLASH_INCLUDE
#define  _OBJ_INCLUDE

#include "include.h"

#include "obj.c"
#include "obj_reg.c"
-----------------------------

В Softune добавить inc2.c
В Softune добавить в свойствах inc.c  "-s DATA=INC_DATA"
В Softune добавить в свойствах inc2.c "-s DATA=INC2_DATA"
-----------------------------

В obj.h  заменить _MAIN_INCLUDE на _OBJ_INCLUDE

