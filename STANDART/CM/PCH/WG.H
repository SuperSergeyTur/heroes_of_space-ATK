#ifndef _wg_h
#define _wg_h

void wg_interrupt(void);
void Init_DT (void);
lword Set_PulseWidth ( float alfa, word Um,  uint32_t PeriodValue);
//void mVkl_imp(void);
//void mOtkl_imp(void);
#ifdef _Synchr

float Corr_phase( float Angle, Synchr *syn );

#endif

//#define _wgL360_mask  (0xffffu)
//#define _wgL180_mask  (0x7fffu)
//#define _wgL90_mask   (0x3fffu)
//#define _wdL120_mask  (0X5555u)
//#define _wdLm120_mask (0xaaabu)
#define _sqr3_mask    (1.732)
#define _sqr2         (1.414)
#define _PI           3.1415926535
//#ifdef  MB91362

#define   DinT_dut     LPC_PWM0->MR1

#define _PIN_PULSES     ((1u<<19)|(1u<<25)|(1u<<28))
#define _PIN_NOT_PULSES ((1u<<22)|(1u<<26)|(1u<<29))


#ifndef mOtkl_imp

#define mOtkl_imp()       LPC_GPIO2->SET = 0x4

#endif
                            
#ifndef mVkl_imp    

#define mVkl_imp()        LPC_GPIO2->CLR = 0x4

#endif
                            
                            

            //  оличество точек в таблице равно старшему байту+1 бит
            // младшего (условной целой части) угла в 90 градусов плюс одна
            // нулева€ и одна завершающа€ точки.
#define  _size_sin_tab  ( 0x3fff/128+2 )

/*------------------------------------------------*/
#ifdef _REG_INCLUDE
/*------------------------------------------------*/
//MCPWM_CHANNEL_CFG_Type channelsetup[3];
_register word sin_cx, sin_ax;
_register lword sin_lax;

word   Umsin_d , Fsin_d, dUm , DT, frt, Per_nes, Fwg;
float Lsin_z,sdvig;
word Lsin_z_i;
/*-------------------------ƒл€ регул€тора-----------*/
//word Ku_reg ;


_register  word wg_ax , wg_bx, wg_cx, wg_dx, wg_ex ;

_register lword wg_lax  ;

word A_wg,B_wg, C_wg;
          //   “аблица задает Sin в интервале [0...90] градусов: и
          // составлена дл€ точек кратных '0x100'(0x000, 0x100, 0x200,...).
/*
const word  _sin_tab[_size_sin_tab] =
  {
      0x0000, 0x0324, 0x0648, 0x096c, 0x0c8f, 0x0fb2, 0x12d5, 0x15f6,
      0x1917, 0x1c37, 0x1f56, 0x2274, 0x2590, 0x28ab, 0x2bc4, 0x2edb,
      0x31f1, 0x3505, 0x3817, 0x3b26, 0x3e34, 0x413f, 0x4447, 0x474d,
      0x4a50, 0x4d50, 0x504d, 0x5347, 0x563e, 0x5932, 0x5c22, 0x5f0e,
      0x61f7, 0x64dd, 0x67be, 0x6a9b, 0x6d74, 0x7049, 0x731a, 0x75e6,
      0x78ad, 0x7b70, 0x7e2e, 0x80e8, 0x839c, 0x864b, 0x88f6, 0x8b9a,
      0x8e3a, 0x90d4, 0x9368, 0x95f7, 0x9880, 0x9b03, 0x9d80, 0x9ff7,
      0xa268, 0xa4d2, 0xa736, 0xa994, 0xabeb, 0xae3c, 0xb086, 0xb2c9,
      0xb505, 0xb73a, 0xb968, 0xbb8f, 0xbdaf, 0xbfc7, 0xc1d8, 0xc3e2,
      0xc5e4, 0xc7de, 0xc9d1, 0xcbbc, 0xcd9f, 0xcf7a, 0xd14d, 0xd318,
      0xd4db, 0xd696, 0xd848, 0xd9f2, 0xdb94, 0xdd2d, 0xdebe, 0xe046,
      0xe1c5, 0xe33c, 0xe4aa, 0xe60f, 0xe76b, 0xe8bf, 0xea09, 0xeb4b,
      0xec83, 0xedb2, 0xeed8, 0xeff5, 0xf108, 0xf213, 0xf314, 0xf40b,
      0xf4f9, 0xf5de, 0xf6b9, 0xf78b, 0xf853, 0xf912, 0xf9c7, 0xfa72,
      0xfb14, 0xfbac, 0xfc3a, 0xfcbf, 0xfd3a, 0xfdab, 0xfe12, 0xfe70,
      0xfec3, 0xff0d, 0xff4d, 0xff83, 0xffb0, 0xffd2, 0xffeb, 0xfffa,
      0xfffe
  } ;*/
/* const word  _sin_tab[_size_sin_tab]=
  {
      0x0000, 0x04b6, 0x096b, 0x0e20, 0x12d2, 0x1782, 0x1c2e, 0x20d6,
      0x257a, 0x2a18, 0x2eb1, 0x3343, 0x37ce, 0x3c51, 0x40cc, 0x453d,
      0x49a6, 0x4e03, 0x5257, 0x569f, 0x5adb, 0x5f0b, 0x632e, 0x6743,
      0x6b4b, 0x6f45, 0x732f, 0x770b, 0x7ad7, 0x7e93, 0x823e, 0x85d9,
      0x8963, 0x8cdb, 0x9041, 0x9395, 0x96d7, 0x9a07, 0x9d23, 0xa02d,
      0xa323, 0xa606, 0xa8d6, 0xab91, 0xae39, 0xb0ce, 0xb34e, 0xb5ba,
      0xb812, 0xba57, 0xbc87, 0xbea3, 0xc0ab, 0xc2a0, 0xc481, 0xc64e,
      0xc808, 0xc9ae, 0xcb42, 0xccc2, 0xce30, 0xcf8b, 0xd0d4, 0xd20b,
      0xd330, 0xd443, 0xd546, 0xd638, 0xd719, 0xd7ea, 0xd8ab, 0xd95d,
      0xda00, 0xda94, 0xdb1a, 0xdb93, 0xdbfe, 0xdc5c, 0xdcad, 0xdcf3,
      0xdd2d, 0xdd5c, 0xdd80, 0xdd9a, 0xddab, 0xddb2, 0xddb1, 0xdda7,
      0xdd96, 0xdd7d, 0xdd5e, 0xdd38, 0xdd0c, 0xdcdc, 0xdca6, 0xdc6c,
      0xdc2e, 0xdbec, 0xdba8, 0xdb61, 0xdb18, 0xdacd, 0xda81, 0xda34,
      0xd9e7, 0xd99a, 0xd94d, 0xd900, 0xd8b5, 0xd86b, 0xd823, 0xd7dd,
      0xd799, 0xd758, 0xd71a, 0xd6df, 0xd6a7, 0xd673, 0xd643, 0xd617,
      0xd5ef, 0xd5cb, 0xd5ac, 0xd591, 0xd57b, 0xd56a, 0xd55e, 0xd556,
      0xd554
  };*/
//“рапеци€ sin(wt)+(sin(3wt)/6)
/* const word  _sin_tab0[_size_sin_tab]=
  {
      0x0000, 0x056b, 0x0ad5, 0x103e, 0x15a5, 0x1b08, 0x2068, 0x25c3,
      0x2b19, 0x3069, 0x35b2, 0x3af4, 0x402d, 0x455d, 0x4a84, 0x4fa0,
      0x54b2, 0x59b7, 0x5eb1, 0x639d, 0x687c, 0x6d4d, 0x720e, 0x76c1,
      0x7b63, 0x7ff6, 0x8477, 0x88e6, 0x8d44, 0x918f, 0x95c8, 0x99ed,
      0x9dfe, 0xa1fc, 0xa5e5, 0xa9b9, 0xad78, 0xb121, 0xb4b6, 0xb834,
      0xbb9c, 0xbeee, 0xc229, 0xc54e, 0xc85c, 0xcb53, 0xce33, 0xd0fc,
      0xd3af, 0xd64a, 0xd8ce, 0xdb3c, 0xdd92, 0xdfd2, 0xe1fb, 0xe40d,
      0xe609, 0xe7ef, 0xe9bf, 0xeb79, 0xed1d, 0xeead, 0xf027, 0xf18c,
      0xf2dd, 0xf41a, 0xf544, 0xf65a, 0xf75c, 0xf84d, 0xf92b, 0xf9f8,
      0xfab3, 0xfb5e, 0xfbf8, 0xfc82, 0xfcfd, 0xfd6a, 0xfdc7, 0xfe17,
      0xfe5a, 0xfe90, 0xfeba, 0xfed8, 0xfeeb, 0xfef3, 0xfef2, 0xfee6,
      0xfed2, 0xfeb6, 0xfe92, 0xfe67, 0xfe35, 0xfdfd, 0xfdbf, 0xfd7c,
      0xfd35, 0xfcea, 0xfc9b, 0xfc49, 0xfbf5, 0xfb9f, 0xfb48, 0xfaf0,
      0xfa97, 0xfa3e, 0xf9e5, 0xf98d, 0xf937, 0xf8e2, 0xf88f, 0xf83e,
      0xf7f0, 0xf7a5, 0xf75e, 0xf71a, 0xf6da, 0xf69e, 0xf667, 0xf634,
      0xf606, 0xf5dd, 0xf5b9, 0xf59a, 0xf581, 0xf56d, 0xf55f, 0xf557,
      0xf554
  };*/
 /*union Fsin {
              word all ;
              struct {
                        word  minus     : 1;
                      } _ ;
            }  sin;   */

/*
const word  _sin_tab[_size_sin_tab+1] =
  {
    0x0000, 0x0477, 0x08ef, 0x0d65, 0x11db, 0x164f, 0x1ac2, 0x1f32, 0x23a0,
    0x280b, 0x2c74, 0x30d8, 0x3539, 0x3996, 0x3dee, 0x4241, 0x468f, 0x4ad8,
    0x4f1b, 0x5358, 0x578e, 0x5bbd, 0x5fe5, 0x6406, 0x681f, 0x6c30, 0x7038,
    0x7438, 0x782e, 0x7c1b, 0x7fff, 0x83d9, 0x87a8, 0x8b6c, 0x8f26, 0x92d5,
    0x9678, 0x9a0f, 0x9d9b, 0xa11a, 0xa48d, 0xa7f2, 0xab4b, 0xae96, 0xb1d4,
    0xb504, 0xb825, 0xbb39, 0xbe3d, 0xc133, 0xc41a, 0xc6f2, 0xc9ba, 0xcc72,
    0xcf1a, 0xd1b3, 0xd43a, 0xd6b2, 0xd918, 0xdb6e, 0xddb2, 0xdfe6, 0xe207,
    0xe418, 0xe616, 0xe802, 0xe9dd, 0xeba5, 0xed5a, 0xeefe, 0xf08e, 0xf20c,
    0xf377, 0xf4cf, 0xf614, 0xf745, 0xf864, 0xf96f, 0xfa66, 0xfb4a, 0xfc1b,
    0xfcd8, 0xfd81, 0xfe16, 0xfe97, 0xff05, 0xff5f, 0xffa5, 0xffd7, 0xfff5,
    0xffff
  } ;
  */
/*------------------------------------------------*/
#else
/*------------------------------------------------*/


extern Umsin_d , Fsin_d, dUm, DT, frt, Per_nes , Fwg;
extern float Lsin_z ,sdvig;
extern word Lsin_z_i;
//extern  MCPWM_CHANNEL_CFG_Type channelsetup[];
extern  _register  word wg_ax , wg_bx, wg_cx , wg_dx, wg_ex;
extern  _register lword wg_lax  ;

extern word A_wg,B_wg, C_wg;

extern _register word sin_cx, sin_ax;
extern _register lword sin_lax;

//extern  const word  _sin_tab[_size_sin_tab];
//extern  const word  _sin_tab0[_size_sin_tab];
//extern union  Fsin sin;
/*------------------------------------------------*/
#endif
#endif

