
#ifndef _asm_def
#define _asm_def
union op_flg
{
  byte all;
  struct
  {
   word C   :1;
   word V   :1;
   word Z   :1;
   word N   :1;
   word T   :1;
   word S   :1;
   word I   :1;
   word rez :1;
  }_;
};


#ifdef _MAIN_INCLUDE

lword  lw_src1  ;
// word  w_src1 , w_src2 ;
 byte  b_src1 ;//, b_src2 ;
// union op_flg  PS;

#else

extern lword  lw_src1  ;
//extern  word  w_src1 , w_src2 ;
extern  byte  b_src1 ;//, b_src2 ;
//extern  union op_flg  PS;

#endif

/*ДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДД-*/

/*   Макрос для знакового и беззнакового умножения операндов из двух источников
 * и размещением результата в приемнике.
 *   Параметры:
 *      src1  -  первый источник - двухбайтный, задается любым типом адресации;
 *      src2  -  второй источник - двухбайтный, задается любым типом адресации;
 *      dest  -  приемник - четырехбайтный, задается регистровым типом адресации.
 */
#define   asm_mul( dest , src1 , src2 )  dest =  __mul( src1 , src2 )
                 /*asm {                        \
                         ld   dest  , src1 ;    \
                         mul  dest  , src2 ;    \
                       }
                 */
#define   asm_mulu( dest , src1 , src2 )  dest =  __mulu( src1 , src2 )
                 /*asm {                        \
                         ld   dest  , src1 ;    \
                         mulu dest  , src2 ;    \
                       }
                 */
/*ДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДД-*/

/*   Макросы для знакового и беззнакового деления (четырехбайтного на
 * двухбайтное) из двух источников и размещением результата в первом источнике.
 *   Параметры:
 *      src1  - перед делением, как первый источник:
                - делимое  - четырехбайтный, задается регистровым типом адресации;
 *            - после деления, как приемник:
 *              -  младшее слово - целая часть результата ;
 *              -  старшее слово - остаток результата ;
 *      src2  -  второй источник - делитель - двухбайтный, задается любым типом адресации.
 */
      /* src1 = __div( src1, src2 )*/
#define   asm_div( src1, src2 )       \
{           lw_src1 = src1 ;  \
             w_src2 = src2 ;  \
            __asm(" movl  a, _lw_src1");  \
            __asm(" divw  a, _w_src2");   \
            __asm(" mov  _b_src1 , r0");   \
            __asm(" movw _lw_src1, a");   \
            __asm(" movw  a, _w_src2");   \
            __asm(" movw _lw_src1+2, a"); \
            src1 = lw_src1 ;  \
}

#define   asm_divu( src1, src2 )      \
{           lw_src1 = src1 ;  \
             w_src2 = src2 ;  \
            __asm(" movl  a, _lw_src1");  \
            __asm(" divuw a, _w_src2");   \
            __asm(" mov  _b_src1 , a");   \
            __asm(" movw _lw_src1, a");   \
            __asm(" movw  a, _w_src2");   \
            __asm(" movw _lw_src1+2, a"); \
            src1 = lw_src1 ;  \
            PS.all = b_src1;\
}
//            __asm(" mov   a, ilm");   \
  //          __asm(" mov   r0, ccr");   \
/*ДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДД-*/

/*   Макросы для знакового и беззнакового деления (двухбайтного на
 * однобайтное) из двух источников и размещением результата в первом источнике.
 *   Параметры:
 *      src1  - перед делением, как первый источник:
                - делимое  - бвухбайтный, задается регистровым типом адресации;
 *            - после деления, как приемник:
 *              -  младший байт - целая часть результата ;
 *              -  старший байт - остаток результата ;
 *      src2  -  второй источник - делитель - однобайтный, задается любым типом адресации.
 */
#define   asm_divb( src1, src2 )      \
{           w_src1 = src1 ;  \
            b_src2 = src2 ;  \
            __asm(" movw a,  _w_src1"); \
            __asm(" mov  a,  _b_src2"); \
            __asm(" div  a");           \
            __asm(" mov  _b_src1 , a");   \
            __asm(" mov  _w_src1  , a");\
            __asm(" swapw ");            \
            __asm(" mov  _w_src1+1, a");\
            src1 = w_src1 ;  \
}
    //        __asm(" mov   a, ccr");   \

#define   asm_divub( src1, src2 )     \
{           w_src1 = src1 ;  \
            b_src2 = src2 ;  \
            __asm(" movw a,  _w_src1"); \
            __asm(" mov  a,  _b_src2"); \
            __asm(" divu a");           \
            __asm(" mov  _b_src1 , a");   \
            __asm(" mov  _w_src1  , a");\
            __asm(" swapw ");            \
            __asm(" mov  _w_src1+1, a");\
            src1 = w_src1 ;  \
}
/*
            __asm(" mov   a, ccr");   \
 */
/*ДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДД-*/

/*   Макрос для пересылки двухбайтного операнда из источника в приемник.
 *   Параметры:
 *      src   -  источник - двухбайтный, задается любым типом адресации;
 *      dest  -  приемник - двухбайтный, задается регистровым типом адресации.
                       *dest = w_src2;\
 */
#define   asm_ld( dest , src )                \
                  {                        \
                       w_src1 = *src;\
                       __asm (" movw a, _w_src1");     \
                       __asm (" movw _w_src2, a");\
                     }

/*ДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДД-*/

/*   Макросы проверки признака нуля. */

/*   Параметры:
 *      label  -  метка перехода в случае не нуля.
 */
#define   asm_bne( label )                    \
                 {                          \
                      __asm(" BNE "#label);\
                 }

/*ДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДД-*/

/*   Макросы проверки признака переполнения. */

/*   Параметры:
 *      label  -  метка перехода в случае отсутствия переполнения.
 */
#define   asm_bnv( label )                    \
                     {                        \
                        __asm( " bnv "#label);\
                     }

/*   Параметры:
 *      label  -  метка перехода в случае наличия переполнения.
 */
#define   asm_bv( label )                     \
                  {                        \
                       if ( PS._.V == 0 ) goto label;\
                     }

/*   Макросы проверки признака переноса. */

/*   Параметры:
 *      label  -  метка перехода в случае признак переноса очищен.
 */
#define   asm_bnc( label )                    \
                  {                        \
                       if ( PS._.C != 0 ) goto label;\
                     }

/*ДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДД-*/

/*   Макросы запрета/разрешения прерываний. */

/*  Без параметров.
 */
#define   asm_ei()     __EI()
#define   asm_di()     __DI()

/*   Макрос сброса процессора. */

/*  Без параметров.
 */
#define   asm_rst()  __asm("reset")

/*   Макрос холостой операции. */

/*  Без параметров.
 */
#define   asm_nop()  __asm(" nop")

/*ДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДД-*/

/*   Макрос для команды нормализации четырехбайтного операнда.
 *   Параметры:
 *      src   -  источник - четырехбайтный, задается регистровым типом адресации;
 *      dest  -  приемник - однобайтный, задается регистровым типом адресации.
 */

#define   asm_norml( src , dest )             \
                    {                        \
                       lw_src1 = src;\
                       __asm(" movl a , _lw_src1");\
                       __asm(" nrml a , r0");\
                       __asm(" movl _lw_src1, a");\
                       __asm(" mov a, r0");\
                       __asm(" mov _b_src1, a");\
                       src = lw_src1;\
                       dest = b_src1;\
                     }


/*ДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДД-*/


#endif

