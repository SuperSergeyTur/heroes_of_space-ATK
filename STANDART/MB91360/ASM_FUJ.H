
#ifndef _asm_def
#define _asm_def

#ifdef _MAIN_INCLUDE

word   flg_nul;
lword  lw_src1, lw_src2 ;
slword slw_src1, slw_src2 ;
//lword  *lw_src2 ;
word  w_src1 , w_src2 ;
 byte  b_src1 , b_src2 ;
 sbyte sb_src1 ,sb_src2 ;

#else

extern word   flg_nul;
extern lword  lw_src1, lw_src2 ;
extern slword  slw_src1, slw_src2 ;
//extern lword  *lw_src2;
extern  lword  w_src1 , w_src2 ;
extern  byte  b_src1 , b_src2 ;
extern sbyte sb_src1 ,sb_src2 ;

#endif

/*ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ-*/

/*   ћакрос дл€ знакового и беззнакового умножени€ операндов из двух источников
 * и размещением результата в приемнике.
 *   ѕараметры:
 *      src1  -  первый источник - двухбайтный, задаетс€ любым типом адресации;
 *      src2  -  второй источник - двухбайтный, задаетс€ любым типом адресации;
 *      dest  -  приемник - четырехбайтный, задаетс€ регистровым типом адресации.
 */
#define   asm_mul( dest , src1 , src2 )  dest =  __mul( src1 , src2 )
                 /*asm {                        \
                         ld   dest  , src1 ;    \
                         mul  dest  , src2 ;    \
                       }
                 */
#define   asm_mulu( dest , src1 , src2 )  dest =  __mulu( src1 , src2 )
                 /*asm {                        \
                         ld   dest  , src1 ;    \
                         mulu dest  , src2 ;    \
                       }
                 */
/*ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ-*/

/*   ћакросы дл€ знакового и беззнакового делени€ (четырехбайтного на
 * двухбайтное) из двух источников и размещением результата в первом источнике.
 *   ѕараметры:
 *      src1  - перед делением, как первый источник:
                - делимое  - четырехбайтный, задаетс€ регистровым типом адресации;
 *            - после делени€, как приемник:
 *              -  младшее слово - цела€ часть результата ;
 *              -  старшее слово - остаток результата ;
 *      src2  -  второй источник - делитель - двухбайтный, задаетс€ любым типом адресации.
 */
      /* src1 = __div( src1, src2 )*/
#define   asm_div( src1, src2 ) \
{  \
    src1 =(src1/src2);\
}

#define   asm_divu( src1, src2 )    \
{           lw_src1 = src1 ;  \
            lw_src2 = src2 ;  \
            __asm( " stm ( r2, r3 ,r13 ) "); \
            __asm(" ldi:32 #_lw_src1, r13 ");  \
            __asm(" ld @r13, r2 ");  \
            __asm(" mov  r2 , mdl ");   \
            __asm(" ldi:32 #_lw_src2, r3 ");  \
            __asm(" ld @r3, r2 ");  \
            __asm(" div0u r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" mov mdh, r3"); \
            __asm(" lsl #16, r3"); \
            __asm(" ldi:32 #_lw_src1, r13 ");  \
            __asm(" st r3, @r13"); \
            src1 = lw_src1;\
            __asm(" mov mdl, r3"); \
            __asm(" ldi #65535, r2 ");  \
            __asm(" and r2, r3 ");  \
            __asm(" ldi:32 #_lw_src1, r13 ");  \
            __asm(" st r3, @r13"); \
            src1 +=lw_src1 ;\
            __asm(" ldm ( r2, r3, r13)"); \
          }



/*ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ-*/

/*   ћакросы дл€ знакового и беззнакового делени€ (двухбайтного на
 * однобайтное) из двух источников и размещением результата в первом источнике.
 *   ѕараметры:
 *      src1  - перед делением, как первый источник:
                - делимое  - двухбайтный, задаетс€ регистровым типом адресации;
 *            - после делени€, как приемник:
 *              -  младший байт - цела€ часть результата ;
 *              -  старший байт - остаток результата ;
 *      src2  -  второй источник - делитель - однобайтный, задаетс€ любым типом адресации.
 */
/*            __asm(" extsb r2 ");  \
            __asm(" extsh r2 ");  \*/

#define   asm_divb( src1,src2 )      \
{            lw_src1 = src1 ;  \
             lw_src2 = src2 ;  \
            __asm( " stm ( r2, r3 ,r13 ) "); \
            __asm(" ldi:32 #_lw_src1, r13 ");  \
            __asm(" lduh @r13, r2 ");  \
            __asm(" mov  r2 , mdl ");   \
            __asm(" ldi:32 #_lw_src2, r3 ");  \
            __asm(" ldub @r3, r2 ");  \
            __asm(" div0s r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div2 r2"); \
            __asm(" div3"); \
            __asm(" div4s"); \
            __asm(" mov mdh, r3"); \
            __asm(" lsl #8, r3"); \
            __asm(" ldi:32 #_lw_src1, r13 ");  \
            __asm(" st r3, @r13"); \
            src1 = lw_src1;\
            __asm(" mov mdl, r3"); \
            __asm(" ldi #255, r2 ");  \
            __asm(" and r2, r3 ");  \
            __asm(" ldi:32 #_lw_src1, r13 ");  \
            __asm(" st r3, @r13"); \
            src1 +=lw_src1 ;\
            __asm(" ldm ( r2, r3, r13)"); \
}

#define   asm_divub( src1, src2 )     \
{           lw_src1 = src1 ;  \
            lw_src2 = src2 ;  \
            __asm( " stm ( r2, r3 ,r13 ) "); \
            __asm(" ldi:32 #_lw_src1, r13 ");  \
            __asm(" ld @r13, r2 ");  \
            __asm(" mov  r2 , mdl ");   \
            __asm(" ldi:32 #_lw_src2, r3 ");  \
            __asm(" ld @r3, r2 ");  \
            __asm(" div0u r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" div1 r2"); \
            __asm(" mov mdh, r3"); \
            __asm(" lsl #8, r3"); \
            __asm(" ldi:32 #_lw_src1, r13 ");  \
            __asm(" st r3, @r13"); \
            src1 = lw_src1;\
            __asm(" mov mdl, r3"); \
            __asm(" ldi #255, r2 ");  \
            __asm(" and r2, r3 ");  \
            __asm(" ldi:32 #_lw_src1, r13 ");  \
            __asm(" st r3, @r13"); \
            src1 +=lw_src1 ;\
            __asm(" ldm ( r2, r3, r13)"); \
          }

/*
 */
/*ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ-*/

/*   ћакрос дл€ пересылки двухбайтного операнда из источника в приемник.
 *   ѕараметры:
 *      src   -  источник - двухбайтный, задаетс€ любым типом адресации;
 *      dest  -  приемник - двухбайтный, задаетс€ регистровым типом адресации.
 */
/*#define   asm_ld( dest , src )                \
                 asm {                        \
                       ld   dest  , src ;     \
                     }*/

/*   ћакрос дл€ пересылки однобайтного операнда из источника в приемник.
 *   ѕараметры:
 *      src   -  источник - однобайтный, задаетс€ любым типом адресации;
 *      dest  -  приемник - однобайтный, задаетс€ регистровым типом адресации.
 */
/*#define   asm_ldb( dest , src )               \
                 asm {                        \
                       ldb   dest  , src ;    \
                     }*/

/*   ћакрос дл€ пересылки двухбайтного операнда из источника в приемник.
 *   ѕараметры:
 *      src   -  источник - двухбайтный, задаетс€ любым типом адресации;
 *      dest  -  приемник - двухбайтный, задаетс€ регистровым типом адресации.
 */
/*#define   asm_st( src , dest )                \
                 asm {                        \
                       st   scr  , dest ;     \
                     }*/

/*   ћакрос дл€ пересылки однобайтного операнда из источника в приемник.
 *   ѕараметры:
 *      src   -  источник - однобайтный, задаетс€ любым типом адресации;
 *      dest  -  приемник - однобайтный, задаетс€ регистровым типом адресации.
 */
/*#define   asm_stb( src , dest )               \
                 asm {                        \
                       stb   src , dest  ;    \
                     }*/

/*ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ-*/

/*   ћакросы дл€ логических операций. */
/*   Ћогическое "»" - параметры:
 *      src   -  источник - задаетс€ любым типом адресации;
 *      dest  -  источник/приемник - задаетс€ регистровым типом адресации.
 */
/*#define   asm_and( dest , src )               \
                 asm {                        \
                       and   dest  , src ;    \
                     }

#define   asm_andb( dest , src )               \
                 asm {                         \
                       andb   dest  , src ;    \
                     }*/

/*   Ћогическое "»Ћ»" - параметры:
 *      src   -  источник - задаетс€ любым типом адресации;
 *      dest  -  источник/приемник - задаетс€ регистровым типом адресации.
 */
/*#define   asm_or( dest , src )               \
                 asm {                       \
                       or   dest  , src ;    \
                     }

#define   asm_orb( dest , src )               \
                 asm {                        \
                       orb   dest  , src ;    \
                     }*/

/*ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ-*/

/*   ћакросы дл€ команды сравнени€. */
/*   ѕараметры:
 *      src1  -  источник - задаетс€ регистровым типом адресации;
 *      src2  -  источник - задаетс€ любым типом адресации.
 */
/*#define   asm_cmp( src1 , src2 )               \
                 asm {                         \
                       cmp   src1 , src2 ;     \
                     }*/

/*ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ-*/

/*   ћакросы дл€ двухбайтного команд сдвига. */
/*   ѕараметры:
 *      src1  -  источник/приемник - сдвигаемый операнд, задаетс€ регистровым типом адресации;
 *      src2  -  источник - количество сдвигов, задаетс€ любым типом адресации.
 */
/*#define   asm_shl( src1 , src2 )               \
                 asm {                         \
                       shl   src1 , src2 ;     \
                     }

#define   asm_shr( src1 , src2 )               \
                 asm {                         \
                       shr   src1 , src2 ;     \
                     }*/
/*ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ-*/

/*   ћакросы работы со стеком.
 *   ѕараметры:
 *      src   -  источник - двухбайтный, задаетс€ любым типом адресации;
 */
/*#define   asm_push( src )            \
                 asm {               \
                       push  src  ;  \
                     }

#define   asm_pop( src )             \
                 asm {               \
                       pop  src  ;   \
                     }*/

/*ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ-*/

/*   ћакрос очистки (обнулени€) операнда.
 *   ѕараметры:
 *      src   -  обнул€емый операнд - двухбайтный.
 */
/*#define   asm_clr( src )                      \
                 asm {                        \
                       clr  src ;             \
                     }*/

/*ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ-*/

/*   ћакросы проверки признака нул€. */

/*   ѕараметры:
 *      label  -  метка перехода в случае не нул€.
 */
#define   asm_bne( label )   if (flg_nul == 0) goto label  \
/*ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ-*/

/*   ћакросы проверки признака знака "минус".   */

/*   ѕараметры:
 *      label  -  метка перехода в случае 'минуса'.
 */
/*#define   asm_blt( label )                    \
                 asm {                        \
                       blt  label ;           \
                     }*/

/*ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ-*/

/*   ћакросы проверки признака переполнени€. */

/*   ѕараметры:
 *      label  -  метка перехода в случае отсутстви€ переполнени€.
 */
/*#define   asm_bnv( label )                    \
                 asm {                        \
                       bnv  label ;           \
                     }*/

/*   ѕараметры:
 *      label  -  метка перехода в случае наличи€ переполнени€.
 */
/*#define   asm_bv( label )                     \
                 asm {                        \
                       bv  label ;            \
                     }*/

/*   ћакросы проверки признака переноса. */

/*   ѕараметры:
 *      label  -  метка перехода в случае признак переноса очищен.
 */
/*#define   asm_bnc( label )                    \
                 asm {                        \
                       bnc  label ;           \
                     }*/

/*   ћакросы проверки признаков нул€ и переноса. */

/*   ѕараметры:
 *      label  -  метка перехода в случае если "больше".
 */
/*#define   asm_bh( label )                    \
                 asm {                       \
                       bh  label ;           \
                     }*/

/*ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ-*/

/*   ћакросы тестировани€ заданного бита в заданном байте и перехода. */

/*   ѕараметры:
 *      src1   -  заданный байт.
 *      src2   -  заданый бит в заданном байте.
 *      label  -  метка перехода в случае нулевого значени€ бита.
 */
/*#define   asm_bbc( src1 , src2 , label )       \
                 asm {                         \
                       bbc src1, src2, label ; \
                     }*/

/*   ѕараметры:
 *      src1   -  заданный байт.
 *      src2   -  заданый бит в заданном байте.
 *      label  -  метка перехода в случае единичного значени€ бита.
 */
/*#define   asm_bbs( src1 , src2 , label )       \
                 asm {                         \
                       bbs src1, src2, label ; \
                     }*/

/*ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ-*/

/*   ћакросы запрета/разрешени€ прерываний. */

/*  Ѕез параметров.
 */
#define   asm_ei()     __EI()
                 /*asm {               \
                        ei ;           \
                       }
                 */
#define   asm_di()      __DI()
                 /*asm {                \
                         di ;           \
                       }
                 */

/*   ћакросы запрета/разрешени€ pts-прерываний. */

/*  Ѕез параметров.
 */
#define   asm_epts()
                /* asm {                \
                         epts ;         \
                       }
                */
#define   asm_dpts()
                /* asm {                \
                         dpts ;         \
                       }
                */

/*   ћакрос сброса процессора. */

/*  Ѕез параметров.
 */
#define   asm_rst()  __asm("reset")

/*   ћакрос холостой операции. */

/*  Ѕез параметров.
 */
#define   asm_nop()  __asm("nop")

/*ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ-*/

/*   ћакрос дл€ команды нормализации четырехбайтного операнда.
 *   ѕараметры:
 *      src   -  источник - четырехбайтный, задаетс€ регистровым типом адресации;
 *      dest  -  приемник - однобайтный, задаетс€ регистровым типом адресации.
 */
#define   asm_norml( src , dest )     \
                 { \
                   for (dest = 0; (slw)src >=  0; ++ dest) \
                   {\
                     src<<=1;\
                     if ( dest > 31) \
                     {\
                       break;\
                     }\
                   }\
                   if(src == 0) flg_nul = 1;\
                   else flg_nul = 0;\
                 }
/*ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ-*/

/*   ћакрос дл€ команды обмена местами двух однобайтных операндов.
 *   ѕараметры:
 *      src1  -  первый источник/приемник, задаетс€ регистровым типом адресации;
 *      src2  -  второй источник/приемник, задаетс€ любым типом адресации;
 */
/*#define   asm_xchb( src1 , src2 )             \
                 asm {                        \
                       xchb src1 , src2 ;     \
                     }*/

/*ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ-*/


#endif

